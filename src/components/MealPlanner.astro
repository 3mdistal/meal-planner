---
import MealPlanForm from "@/components/MealPlanForm.astro";
import MealPlanDisplay from "@/components/MealPlanDisplay.astro";

const { days, breakfastRecipes, dinnerRecipes, snacks, sides, desserts, fruits, initialMealPlan, initialWeeklyItems } = Astro.props;
---

<div class="meal-planner-container">
  <div class="form-container">
    <MealPlanForm
      {days}
      {breakfastRecipes}
      {dinnerRecipes}
      {snacks}
      {sides}
      {desserts}
      {fruits}
    />
  </div>

  <div class="plan-display-container">
    <h2>This Week's Meal Plan</h2>
    <MealPlanDisplay
      {days}
      {initialMealPlan}
      {initialWeeklyItems}
    />
  </div>
</div>

<style>
  .meal-planner-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }

  .form-container {
    flex: 1;
  }

  .plan-display-container {
    flex: 1;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
  }

  h2 {
    margin-top: 0;
    color: #333;
    font-size: 1.5rem;
  }

  @media (min-width: 768px) {
    .meal-planner-container {
      flex-direction: row;
      align-items: flex-start;
    }

    .form-container {
      width: 50%;
      padding-right: 1rem;
    }

    .plan-display-container {
      width: 50%;
      position: sticky;
      top: 1rem;
    }
  }
</style>

<script>
    const form = document.getElementById("mealPlanForm") as HTMLFormElement;
    const mealPlanDisplay = document.getElementById("mealPlanDisplay") as HTMLDivElement;
  
    type Day = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";
    type Meal = { main: string; sides: string[] };
    type MealPlan = Record<Day, { breakfast: Meal; dinner: Meal }>;
    type WeeklyItems = {
      snacks: string[];
      desserts: string[];
      fruits: string[];
    };
  
    // Initialize mealPlan and weeklyItems
    const mealPlan: MealPlan = {} as MealPlan;
    const weeklyItems: WeeklyItems = {
      snacks: [],
      desserts: [],
      fruits: [],
    };
  
    function saveMealPlan() {
      localStorage.setItem('mealPlan', JSON.stringify(mealPlan));
      localStorage.setItem('weeklyItems', JSON.stringify(weeklyItems));
      alert('Meal plan saved successfully!');
    }
  
    function loadMealPlan() {
      const savedMealPlan = localStorage.getItem('mealPlan');
      const savedWeeklyItems = localStorage.getItem('weeklyItems');
      
      if (savedMealPlan) {
        Object.assign(mealPlan, JSON.parse(savedMealPlan));
      }
      if (savedWeeklyItems) {
        Object.assign(weeklyItems, JSON.parse(savedWeeklyItems));
      }
      
      updateMealPlanDisplay(mealPlan, weeklyItems);
      populateFormFields();
    }
  
    function populateFormFields() {
      for (const day in mealPlan) {
        for (const mealType in mealPlan[day as Day]) {
          const meal = mealPlan[day as Day][mealType as keyof typeof mealPlan[Day]];
          const mainInput = document.getElementById(`${day}-${mealType}-main`) as HTMLInputElement;
          if (mainInput) mainInput.value = meal.main;
  
          const sidesMultiSelect = document.getElementById(`${day}-${mealType}-sides`);
          if (sidesMultiSelect) {
            const event = new CustomEvent('setvalues', { detail: meal.sides });
            sidesMultiSelect.dispatchEvent(event);
          }
        }
      }
  
      for (const item in weeklyItems) {
        const multiSelect = document.getElementById(item);
        if (multiSelect) {
          const event = new CustomEvent('setvalues', { detail: weeklyItems[item as keyof WeeklyItems] });
          multiSelect.dispatchEvent(event);
        }
      }
    }
  
    form.addEventListener('submit', (event) => {
      event.preventDefault();
      saveMealPlan();
    });
  
    document.addEventListener('DOMContentLoaded', loadMealPlan);
  
    function handleSelectChange(event: Event) {
      const input = event.target as HTMLInputElement;
      const multiSelect = input.closest(".multi-select");
      const [day, mealType, itemType] = (multiSelect?.id || input.id).split("-");
  
      if (day && mealType) {
        if (!mealPlan[day as Day]) {
          mealPlan[day as Day] = {
            breakfast: { main: "", sides: [] },
            dinner: { main: "", sides: [] },
          };
        }
        if (itemType === "sides" || multiSelect) {
          const selectedOptions = multiSelect?.querySelectorAll(".selected-option") || [];
          mealPlan[day as Day][mealType as "breakfast" | "dinner"].sides = Array.from(
            selectedOptions
          ).map((option) => option.textContent?.replace("×", "").trim() || "");
        } else {
          mealPlan[day as Day][mealType as "breakfast" | "dinner"].main = input.value;
        }
      } else {
        const weeklyItemKey = (multiSelect?.id || input.closest(".multi-select")?.id) as keyof WeeklyItems;
        const selectedOptions = multiSelect?.querySelectorAll(".selected-option") || [];
        weeklyItems[weeklyItemKey] = Array.from(selectedOptions).map(
          (option) => option.textContent?.replace("×", "").trim() || ""
        );
      }
  
      updateMealPlanDisplay(mealPlan, weeklyItems);
    }
  
    const inputs = form.querySelectorAll('input[type="text"], input[list]');
    inputs.forEach((input) => {
      input.addEventListener("change", handleSelectChange);
      input.addEventListener("keydown", (event) => {
        if ((event as KeyboardEvent).key === "Enter") {
          event.preventDefault();
          handleSelectChange(event);
        }
      });
    });
  
    const multiSelects = form.querySelectorAll(".multi-select");
    multiSelects.forEach((multiSelect) => {
      multiSelect.addEventListener("optionschange", handleSelectChange);
    });
  
    function updateMealPlanDisplay(mealPlan: MealPlan, weeklyItems: WeeklyItems) {
      const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
  
      let html = "";
      for (const day of days) {
        const meals = mealPlan[day as Day] || {
          breakfast: { main: "", sides: [] },
          dinner: { main: "", sides: [] },
        };
        html += `
          <div class="day-plan">
            <h3>${day}</h3>
            <p>Breakfast: <span class="meal breakfast-main">${meals.breakfast.main || "Not planned yet"}</span></p>
            <p>Breakfast Sides: <span class="meal breakfast-sides">${meals.breakfast.sides.length > 0 ? meals.breakfast.sides.join(", ") : "Not planned yet"}</span></p>
            <p>Dinner: <span class="meal dinner-main">${meals.dinner.main || "Not planned yet"}</span></p>
            <p>Dinner Sides: <span class="meal dinner-sides">${meals.dinner.sides.length > 0 ? meals.dinner.sides.join(", ") : "Not planned yet"}</span></p>
          </div>
        `;
      }
      html += `
        <div class="weekly-items">
          <h3>Weekly Items</h3>
          <p>Snacks: <span class="weekly snacks">${weeklyItems.snacks.length > 0 ? weeklyItems.snacks.join(", ") : "Not planned yet"}</span></p>
          <p>Desserts: <span class="weekly desserts">${weeklyItems.desserts.length > 0 ? weeklyItems.desserts.join(", ") : "Not planned yet"}</span></p>
          <p>Fruits: <span class="weekly fruits">${weeklyItems.fruits.length > 0 ? weeklyItems.fruits.join(", ") : "Not planned yet"}</span></p>
        </div>
      `;
      mealPlanDisplay.innerHTML = html;
    }
  
    const copyToClipboardButton = document.getElementById('copyToClipboard') as HTMLButtonElement;
  
    copyToClipboardButton.addEventListener('click', () => {
      const formattedMealPlan = formatMealPlan(mealPlan, weeklyItems);
      navigator.clipboard.writeText(formattedMealPlan).then(() => {
        alert('Meal plan copied to clipboard!');
      }).catch(err => {
        console.error('Failed to copy meal plan: ', err);
      });
    });
  
    function formatMealPlan(mealPlan: MealPlan, weeklyItems: WeeklyItems): string {
      const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
  
      let formattedPlan = "📅 This Week's Meal Plan 📅\n\n";
  
      for (const day of days) {
        const meals = mealPlan[day as Day] || {
          breakfast: { main: "", sides: [] },
          dinner: { main: "", sides: [] },
        };
  
        formattedPlan += `${day}:\n`;
        formattedPlan += `🍳 Breakfast: ${meals.breakfast.main || "Not planned yet"}\n`;
        if (meals.breakfast.sides.length > 0) {
          formattedPlan += `   Sides: ${meals.breakfast.sides.join(", ")}\n`;
        }
        formattedPlan += `🍽️ Dinner: ${meals.dinner.main || "Not planned yet"}\n`;
        if (meals.dinner.sides.length > 0) {
          formattedPlan += `   Sides: ${meals.dinner.sides.join(", ")}\n`;
        }
        formattedPlan += '\n';
      }
  
      formattedPlan += "Weekly Items:\n";
      formattedPlan += `🍿 Snacks: ${weeklyItems.snacks.length > 0 ? weeklyItems.snacks.join(", ") : "Not planned yet"}\n`;
      formattedPlan += `🍰 Desserts: ${weeklyItems.desserts.length > 0 ? weeklyItems.desserts.join(", ") : "Not planned yet"}\n`;
      formattedPlan += `🍎 Fruits: ${weeklyItems.fruits.length > 0 ? weeklyItems.fruits.join(", ") : "Not planned yet"}\n`;
  
      return formattedPlan;
    }
  
    const clearButton = document.getElementById('clearMealPlan') as HTMLButtonElement;
  
    function clearMealPlan() {
      for (const day in mealPlan) {
        mealPlan[day as Day] = {
          breakfast: { main: "", sides: [] },
          dinner: { main: "", sides: [] },
        };
      }
  
      for (const item in weeklyItems) {
        weeklyItems[item as keyof WeeklyItems] = [];
      }
  
      localStorage.removeItem('mealPlan');
      localStorage.removeItem('weeklyItems');
  
      updateMealPlanDisplay(mealPlan, weeklyItems);
  
      const inputs = form.querySelectorAll('input[type="text"], input[list]');
      inputs.forEach((input) => {
        if (input instanceof HTMLInputElement) {
          input.value = '';
        }
      });
  
      const multiSelects = form.querySelectorAll(".multi-select");
      multiSelects.forEach((multiSelect) => {
        const event = new CustomEvent('setvalues', { detail: [] });
        multiSelect.dispatchEvent(event);
      });
  
      alert('Meal plan cleared successfully!');
    }
  
    clearButton.addEventListener('click', clearMealPlan);
  </script>
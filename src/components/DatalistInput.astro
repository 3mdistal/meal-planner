---
interface Props {
  id: string;
  label: string;
  options: Array<{ name: string }>;
}

const { id, label, options } = Astro.props;
---

<div class="datalist-input-container">
  <label for={id}>{label}</label>
  <input list={`${id}-list`} id={id} name={id} class="datalist-input" />
  <datalist id={`${id}-list`}>
    {options.map((option) => <option value={option.name} />)}
  </datalist>
</div>

<style>
  .datalist-input-container {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
  }

  label {
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: #333;
  }

  .datalist-input {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1rem;
    width: 100%;
    transition: border-color 0.3s ease;
  }

  .datalist-input:focus {
    outline: none;
    border-color: #4CAF50;
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
  }

  /* Styling for Webkit browsers (Chrome, Safari) */
  .datalist-input::-webkit-calendar-picker-indicator {
    opacity: 0.6;
    filter: invert(0.5);
  }

  /* Styling for Firefox */
  .datalist-input::-moz-focus-inner {
    border: 0;
  }

  @media (max-width: 768px) {
    .datalist-input {
      font-size: 16px; /* Prevent zoom on mobile devices */
    }
  }
</style>

<script>
  // Enhance datalist behavior
  document.querySelectorAll('.datalist-input').forEach((input) => {
    input.addEventListener('input', function() {
      const val = this.value;
      const opts = this.list.options;
      for (let i = 0; i < opts.length; i++) {
        if (opts[i].value === val) {
          // Trigger change event when a valid option is selected
          this.dispatchEvent(new Event('change', { bubbles: true }));
          break;
        }
      }
    });
  });
</script>
